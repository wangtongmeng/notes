import{_ as i,c as s,o as a,a4 as l}from"./chunks/framework.C5rzuSi5.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fe/interview/css.md","filePath":"fe/interview/css.md","lastUpdated":1698630287000}'),t={name:"fe/interview/css.md"},n=l(`<h2 id="htmlcollection-和-nodelist-区别" tabindex="-1">HTMLCollection 和 NodeList 区别 <a class="header-anchor" href="#htmlcollection-和-nodelist-区别" aria-label="Permalink to &quot;HTMLCollection 和 NodeList 区别&quot;">​</a></h2><p>Node 和 Element</p><ul><li>DOM 是一颗树，所有的节点都是 Node</li><li>Node 是 Element 的基类</li><li>Element 是其他 HTML 元素的基类，如 HTMLDivElement</li></ul><img src="http://cdn.wangtongmeng.com/20240629164342.png" style="zoom:33%;"><p>HTMLCollection 和 NodeList</p><ul><li>HTMLCollection 是 Element 的集合</li><li>NodeList 是 Node 集合</li></ul><p>重点</p><ul><li>获取 Node 和 Element 的返回结果可能不一样</li><li>如 elem.childNodes 和 elem.children 不一样</li><li>前者包含 Text 和 Comment 节点，后者不会</li></ul><h2 id="offsetheight-scrollheight-clientheight的区别" tabindex="-1">offsetHeight scrollHeight clientHeight的区别 <a class="header-anchor" href="#offsetheight-scrollheight-clientheight的区别" aria-label="Permalink to &quot;offsetHeight scrollHeight clientHeight的区别&quot;">​</a></h2><p>计算规则</p><ul><li>offsetHeight offsetWidth: border + padding + height</li><li>clientHeight clientWidth: padding + content</li><li>scrollHeight scrollWidth: padding + 实际内容尺寸</li></ul><h2 id="px-em-rem-vw-vh-有什么区别" tabindex="-1">px % em rem vw/vh 有什么区别 <a class="header-anchor" href="#px-em-rem-vw-vh-有什么区别" aria-label="Permalink to &quot;px % em rem vw/vh 有什么区别&quot;">​</a></h2><ul><li><p>px: 基本单位，绝对单位（其他的都是相对单位）</p></li><li><p>%：相对于父元素的宽度比例</p></li><li><p>em：相对于当前元素的 font-size</p></li><li><p>rem: 相对于根元素的 font-size</p></li><li><p>vw: 屏幕宽度的 !%</p></li><li><p>vh: 屏幕高度的 1%</p></li><li><p>vmin 两者的最小值，vmax 两者的最大值</p></li></ul><h2 id="清除浮动" tabindex="-1">清除浮动 <a class="header-anchor" href="#清除浮动" aria-label="Permalink to &quot;清除浮动&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.clear::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="单行、多行文本溢出隐藏" tabindex="-1">单行、多行文本溢出隐藏 <a class="header-anchor" href="#单行、多行文本溢出隐藏" aria-label="Permalink to &quot;单行、多行文本溢出隐藏&quot;">​</a></h2><p>单号文本溢出</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">overflow: hidden; // 溢出隐藏</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ellipsis; // 溢出用省略号显示</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">white-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: nowrap; // 规定段落中的文本不进行换行</span></span></code></pre></div><p>多行文本溢出</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">overflow: hidden;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ellipsis;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">display: -webkit-box; // 作为弹性伸缩盒子模型显示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-webkit-box-orient: vertical; // 设置伸缩盒子的子元素排列方式：从上到下垂直排列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-webkit-line-clamp: 3; // 显示的行数</span></span></code></pre></div><h2 id="如何判断元素是否到达可视区域" tabindex="-1">如何判断元素是否到达可视区域 <a class="header-anchor" href="#如何判断元素是否到达可视区域" aria-label="Permalink to &quot;如何判断元素是否到达可视区域&quot;">​</a></h2><p>以图片显示为例：</p><ul><li><code>window.innerHeight</code>是浏览器可视区的高度</li><li><code>document.body.scrollTop || document.documentElement.scrollTop</code>是浏览器滚动过的距离；</li><li>内容到达显示区域：img.offsetTop &lt; window.innerHeight + document.body.scrollTop</li></ul><img src="http://cdn.wangtongmeng.com/20231029184517-946265.png" style="zoom:33%;"><h2 id="flex的基础知识-flex-shrink-flex-grow-flex-basis" tabindex="-1">flex的基础知识，flex-shrink，flex-grow，flex-basis <a class="header-anchor" href="#flex的基础知识-flex-shrink-flex-grow-flex-basis" aria-label="Permalink to &quot;flex的基础知识，flex-shrink，flex-grow，flex-basis&quot;">​</a></h2><p>flex-shrink：当空间不足以展示的时候，是否被压缩 flex-grow：当内容超过既定的空间，是否放大 flex-basis：压缩和方法的基准，没设置的时候为width的值</p><h2 id="flex-1表示什么" tabindex="-1">flex: 1表示什么 <a class="header-anchor" href="#flex-1表示什么" aria-label="Permalink to &quot;flex: 1表示什么&quot;">​</a></h2><p>flex属性是flex-grow，flex-shrink和flex-basis的简称，默认值是0 1 auto。<strong>flex:1 表示 flex: 1 1 0%</strong>;</p><ul><li>flex-grow: 定义项目的放大比例，默认是0，即如果存在剩余空间，也不放大；</li><li>flex-shrink：定义项目的缩小比例，默认为1，即如果空间不足，该项目将缩小；</li><li>flex-basis：给上面两个属性分配多余空间之前，计算项目是否有多余空间，默认值为auto，即项目本身的大小。</li></ul><h2 id="nth-child-和-nth-of-type的区别" tabindex="-1">nth-child 和 nth-of-type的区别 <a class="header-anchor" href="#nth-child-和-nth-of-type的区别" aria-label="Permalink to &quot;nth-child 和 nth-of-type的区别&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-UA-Compatible&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;IE=edge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Document&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 先找奇数位，再找其中的div */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 先找奇数位135，再找div 13 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:nth-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2n+1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 先过滤出div，再找奇数行的div */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 找到所有div，1346，取奇数位，14 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* div:nth-of-type(2n+1) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      color: red;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    } */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;4&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;5&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;6&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="什么是bfc-bfc有什么作用" tabindex="-1">什么是BFC？BFC有什么作用？ <a class="header-anchor" href="#什么是bfc-bfc有什么作用" aria-label="Permalink to &quot;什么是BFC？BFC有什么作用？&quot;">​</a></h2><p>1.BFC概念</p><blockquote><p>块级格式化上下文（Block Formatting Context，BFC）是 Web 页面的可视化 css 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。（在BFC内部，块级元素的布局、浮动元素与其他元素的相互作用，会受到BFC规则的影响）</p></blockquote><ul><li>BFC块级格式化上下文，他是页面中的一块渲染区域，且有一套术语自己的渲染规则，他决定了如何对其内容进行布局，以及与其他元素的关系和相互作用。当涉及到可视化布局时，BFC提供了一个环境，HTML元素在这个环境中按照一定规则进行布局；</li><li>BFC是一个独立的布局环境，具有BFC特性的元素可以看作是隔离的独立容器，容器里面的元素不会在布局上影响到外面的元素。</li></ul><blockquote><p>BFC是Web页面中的一个独立渲染区域，具有自己的渲染规则，会影响元素的布局方式并隔离元素。主要的作用就是解决布局问题。</p></blockquote><p>2.BFC的布局规则</p><ul><li>内部的盒子会在垂直方向，一个个放置，每个块元素独占一行。</li><li>盒子垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的上下margin会发生重叠。</li><li>每个元素的左边，与包含的盒子的左边相接触，即使存在浮动也是如此。</li><li>BFC的区域不会与 <code>float box</code> 重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里的元素不会影响到外面的元素，反之亦然。</li><li>计算BFC的高度时，浮动元素也参与计算。</li></ul><p>3.形成 BFC 的条件</p><ul><li><code>float</code>属性不为none</li><li><code>overflow</code> 为 auto、scroll、hidden</li><li><code>display</code> 为inline-block、table-cell、table-caption、flex、inline-flex中的任何一个</li><li><code>position</code> 为 absolute 或 fixed</li></ul><p>4.应用场景</p><h2 id="清浮动" tabindex="-1">清浮动 <a class="header-anchor" href="#清浮动" aria-label="Permalink to &quot;清浮动&quot;">​</a></h2><h2 id="布局" tabindex="-1">布局 <a class="header-anchor" href="#布局" aria-label="Permalink to &quot;布局&quot;">​</a></h2><h3 id="两列布局" tabindex="-1">两列布局 <a class="header-anchor" href="#两列布局" aria-label="Permalink to &quot;两列布局&quot;">​</a></h3><h3 id="三列布局" tabindex="-1">三列布局 <a class="header-anchor" href="#三列布局" aria-label="Permalink to &quot;三列布局&quot;">​</a></h3><h3 id="九宫格布局" tabindex="-1">九宫格布局 <a class="header-anchor" href="#九宫格布局" aria-label="Permalink to &quot;九宫格布局&quot;">​</a></h3>`,46),h=[n];function e(p,k,E,d,r,o){return a(),s("div",null,h)}const y=i(t,[["render",e]]);export{c as __pageData,y as default};
