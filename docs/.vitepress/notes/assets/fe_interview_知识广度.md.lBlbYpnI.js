import{_ as i,c as l,o as s,a4 as a}from"./chunks/framework.C5rzuSi5.js";const E=JSON.parse('{"title":"知识广度","description":"","frontmatter":{},"headers":[],"relativePath":"fe/interview/知识广度.md","filePath":"fe/interview/知识广度.md","lastUpdated":1698736835000}'),e={name:"fe/interview/知识广度.md"},t=a(`<h1 id="知识广度" tabindex="-1">知识广度 <a class="header-anchor" href="#知识广度" aria-label="Permalink to &quot;知识广度&quot;">​</a></h1><ul><li>HTTP 和 WebSocket 有什么区别？</li><li>前端攻击的常用手段有哪些？如何预防？</li><li>请描述koa2洋葱圈模型</li></ul><h2 id="移动端-h5-click-有300ms延迟-如何解决" tabindex="-1">移动端 h5 click 有300ms延迟，如何解决？ <a class="header-anchor" href="#移动端-h5-click-有300ms延迟-如何解决" aria-label="Permalink to &quot;移动端 h5 click  有300ms延迟，如何解决？&quot;">​</a></h2><p>背景：double tap to zoom，双击两次放大，如果间隔超过300ms则认为是单击会有延迟</p><p>初步解决方案：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FastClick</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FastClick.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>FastClick原理：</p><ul><li>监听touchend事件（touchstart touchend 会先于 click触发）</li><li>使用<strong>自定义事件</strong>模拟一个click事件</li><li>把默认的click事件（300ms之后触发）禁止掉</li></ul><p>现代浏览器的改进，添加下面的meta标签即可</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="网络请求中-token-和-cookie-有什么区别" tabindex="-1">网络请求中，token 和 cookie 有什么区别？ <a class="header-anchor" href="#网络请求中-token-和-cookie-有什么区别" aria-label="Permalink to &quot;网络请求中，token 和 cookie 有什么区别？&quot;">​</a></h2><p>cookie</p><ul><li>HTTP 无状态，每次请求都带 cookie，以帮助识别身份</li><li>服务端也可以向客户端 sete-cookie，cookie大小限制 4kb</li><li>默认有跨域限制：不可跨域共享、传递 cookie</li></ul><p>cookie 本地存储</p><ul><li>HTML5 之前 cookie常被用于本地存储</li><li>HTML5 之后推荐使用 localStorage 和 sessionStorage</li></ul><p>现代浏览器开始禁用第三方 cookie</p><ul><li>和跨域限制不同。这里是：禁用网页引入的第三方 JS 设置 cookie</li><li>打击第三方广告，保护用户隐私</li><li>新增属性 SameSize：<strong>Strict /Lax/Node</strong></li></ul><p><strong>微前端或者项目中如何先解决cookie跨域传递（设置withCredentials）和共享的的</strong></p><p>cookie 和 session</p><ul><li>cookie 用于登录验证，存储用户标识（如 userId）</li><li>session 在服务端，存储用户详细信息，和 cookie 信息一一对象</li><li>cookie + session 是常见登录验证解决方案</li></ul><p>token vs cookie</p><ul><li>cookie 是 HTTP 规范，而 token 是自定义传递</li><li>cookie 会默认被浏览器存储，而 token需要自己存储</li><li>token 默认没有跨域限制</li></ul><p>JWT（JSON Web Token）</p><ul><li>前端发起登录，后端验证成功之后，返回一个加密的 token</li><li>前端自行存储这个 token（其中包含了用户信息，加密了）</li><li>以后访问服务端接口，都带着这个token，作为用户信息</li></ul><p>答案：</p><ul><li>cookie：HTTP标准；跨域限制；配合 session 使用；</li><li>token：无标准；无跨域限制；用于 JWT；</li></ul><h2 id="session-和-jwt-哪个更好" tabindex="-1">Session 和 JWT 哪个更好？ <a class="header-anchor" href="#session-和-jwt-哪个更好" aria-label="Permalink to &quot;Session 和 JWT 哪个更好？&quot;">​</a></h2><p>Session优点</p><ul><li>原理简单，易于学习</li><li>用户信息存储在服务端，可快速封禁某个用户</li></ul><p>Session缺点</p><ul><li>占用服务端内存，硬件成本高</li><li>多进程，多服务器时，不好同步——需使用第三方缓存，如 redis</li><li>默认有跨域限制</li></ul><p>JWT优点</p><ul><li>不占用服务内存</li><li>多进程、多服务器 不受影响</li><li>没有跨域限制</li></ul><p>JWT缺点</p><ul><li>用户信息存储在客户端，无法快速封禁某用户</li><li>万一服务端秘钥被泄漏，则用户信息全部丢失</li><li>token体积一般大于 cookie，会增加请求的数据量</li></ul><p>总结</p><ul><li>如有严格管理用户信息的需求（保密、快速封禁）推荐 Session</li><li>如没有特殊需求，则使用 JWT（如创业初期的网站）</li></ul><h2 id="如何实现-sso-单点登录" tabindex="-1">如何实现 SSO 单点登录？ <a class="header-anchor" href="#如何实现-sso-单点登录" aria-label="Permalink to &quot;如何实现 SSO 单点登录？&quot;">​</a></h2><p>基于 cookie</p><ul><li>cookie 默认不可跨域共享，但有些情况下可设置为共享</li><li>主域名相同，如 <code>www.baidu.com</code> <code>image.baidu.com</code></li><li>设置 cookie domain 为主域名，即可共享 cookie</li></ul><p>SSO</p><ul><li><p>主域名完全不同，则 cookie 无法共享</p></li><li><p>可使用 SSO 技术方案</p></li><li><p>时序图</p></li></ul><p>OAuth 2.0</p><ul><li>流程图</li></ul><p>总结</p><ul><li>主域名相同，则可共享 cookie</li><li>主域名不同，则需使用 SSO</li></ul><p><img src="http://cdn.wangtongmeng.com/20231030095311.png" alt=""></p><p><img src="http://cdn.wangtongmeng.com/20231030095917-d1109d.png" alt=""></p><h2 id="http协议和udp协议有什么区别" tabindex="-1">HTTP协议和UDP协议有什么区别 <a class="header-anchor" href="#http协议和udp协议有什么区别" aria-label="Permalink to &quot;HTTP协议和UDP协议有什么区别&quot;">​</a></h2><ul><li>HTTP 协议在应用层</li><li>TCP UDP 协议在传输层</li><li>严格来说，应该拿 TCP 和 UDP 进行比较</li></ul><p>TCP协议</p><ul><li>有连接（三次握手）</li><li>有断开（四次挥手）</li><li>传输稳定</li></ul><p>UDP协议</p><ul><li>无连接，无断开</li><li>不稳定传输，但效率高</li><li>如视频会议、语音通话</li></ul><p>总结</p><ul><li>HTTP 是应用层，TCPUDP 是传输层</li><li>TCP 有连接，有断开，稳定传输</li><li>UDP 无连接，无断开，不稳定传输</li></ul><h2 id="http-协议-1-0-1-1-2-0有什么区别" tabindex="-1">HTTP 协议 1.0 1.1 2.0有什么区别？ <a class="header-anchor" href="#http-协议-1-0-1-1-2-0有什么区别" aria-label="Permalink to &quot;HTTP 协议 1.0 1.1 2.0有什么区别？&quot;">​</a></h2><p>HTTP 1.0</p><ul><li>最基础的 HTTP 协议</li><li>支持基本的 GET POST</li></ul><p>HTTP 1.1</p><ul><li>缓存策略：cache-control E-tag等</li><li>支持长连接 Connection: keep-alive，一次 TCP 连接多次请求</li><li>断点续传，状态码 206</li></ul><h2 id="前端攻击手段有哪些-该如何预防" tabindex="-1">前端攻击手段有哪些，该如何预防 <a class="header-anchor" href="#前端攻击手段有哪些-该如何预防" aria-label="Permalink to &quot;前端攻击手段有哪些，该如何预防&quot;">​</a></h2><p>XSS</p><ul><li>Cross Site Script 跨站脚本攻击</li><li>手段：黑客将 JS 代码插入到网页内容中，渲染时执行 JS 代码</li><li>预防：特殊字符替换（前端或者后端）</li></ul><p>CSRF</p><ul><li>Cross Site Request Forgery 跨站请求伪造</li><li>手动：黑客诱导用户访问另一个网站的接口，伪造请求</li><li>预防：严格的跨域限制+验证码机制</li></ul><p>邮箱里有广告，点击广告，被黑客拿到cookie后，做一些事情，比如转发邮件（邮件里会有敏感信息，比如验证码）、付款操作。所以服务端要做一些二次确认，比如referer是否一致，手机验证码验证等</p><p>CSRF 详细过程</p><ul><li>用户登录了 A 网站，有了 cookie</li><li>黑客诱导用户到 B 网站，并发起 A 网站的请求</li><li>A 网站的 API 发现有 cookie，认为是用户自己操作的</li></ul><p>CSRF 预防手段</p><ul><li>严格的跨域请求限制，如判断 referer（请求来源）</li><li>为 cookie 设置 SameSite，禁止跨域传递 cookie</li><li>关键接口使用短信验证码</li></ul><p>点击劫持</p><ul><li>Click Jacking</li><li>手段：诱导界面上蒙一个透明的 iframe，诱导用户点击</li><li>预防：让 iframe 不能跨域加载</li></ul><img src="http://cdn.wangtongmeng.com/20240619084350.png" style="zoom:33%;">`,74),o=[t];function n(p,h,k,c,r,d){return s(),l("div",null,o)}const g=i(e,[["render",n]]);export{E as __pageData,g as default};
