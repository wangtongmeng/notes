import{_ as l,c as i,o as e,a4 as t}from"./chunks/framework.C5rzuSi5.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fe/interview/网络与浏览器原理.md","filePath":"fe/interview/网络与浏览器原理.md","lastUpdated":1710803317000}'),a={name:"fe/interview/网络与浏览器原理.md"},p=t('<h2 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-label="Permalink to &quot;网络&quot;">​</a></h2><h2 id="http-常见的状态码有哪些" tabindex="-1">http 常见的状态码有哪些 <a class="header-anchor" href="#http-常见的状态码有哪些" aria-label="Permalink to &quot;http 常见的状态码有哪些&quot;">​</a></h2><ul><li>1xx 服务器收到请求</li><li>2xx 成功</li><li>3xx 重定向</li><li>4xx 客户端错误</li><li>5xx 服务器错误</li></ul><p>http 协议中的状态码有很多，但只有一些是我们常用的。也是面试常考的。</p><ul><li>200 成功</li><li>301 永久重定向（同时返回一个 location ，写明重定向的 url）。例如一个网站的网址永久性的切换了</li><li>302 临时重定向（同时返回一个 location ，写明重定向的 url）。例如短链跳转</li><li>304 资源未修改过</li><li>404 未找到资源</li><li>403 没有权限，例如需要登录之后才能请求</li><li>500 服务器内部错误，例如服务器代码异常</li><li>504 网关超时，例如上游服务器连接失败（服务器不是一台机器，可能会有很多台）</li></ul><h2 id="header头" tabindex="-1">header头 <a class="header-anchor" href="#header头" aria-label="Permalink to &quot;header头&quot;">​</a></h2><p>headers 有很多，只讲一下最常用的，也是面试常考的。</p><p><strong>request headers</strong></p><p>浏览器发送请求时，传递给服务端的信息</p><ul><li>Accept 浏览器可接收的数据类型</li><li>Accept-Encoding 浏览器可接收的压缩算法，如 gzip</li><li>Accept-Language 浏览器可接收的语言，如 zh-CN</li><li>Connection: keep-alive 一次 TCP 连接重复使用</li><li>cookie</li><li>Host</li><li>User-Agent 浏览器信息</li><li>Content-type 发送数据的类型，常见的有 application/json，application/x-www-form-urlencoded，multipart/form-data，text/plain 等（用 postman 可演示）</li></ul><p><strong>response headers</strong></p><ul><li>Content-Type 返回的数据类型，对应 Accept</li><li>Content-Length 数据大小</li><li>Content-Encoding 压缩算法，如 gzip ，对应 Accept-Encoding</li><li>Set-Cookie</li></ul><p><strong>自定义 header</strong></p><p>有些接口需要前端调用时，加一个自定义的 header 。 如 axios 中自定义 headers <a href="http://www.axios-js.com/docs/#Request-Config" target="_blank" rel="noreferrer">http://www.axios-js.com/docs/#Request-Config</a></p><p><strong>其他</strong></p><p>关于缓存的 header ，后面会统一讲</p><p>Response headers</p><ul><li>Cache-Control</li><li>Etag</li><li>Expires</li><li>Last-Modified</li></ul><p>Request headers</p><ul><li>If-Modified-Since</li><li>If-None-Match</li></ul><h2 id="ajax-请求中-get-和-post-的区别" tabindex="-1">ajax 请求中 get 和 post 的区别 <a class="header-anchor" href="#ajax-请求中-get-和-post-的区别" aria-label="Permalink to &quot;ajax 请求中 get 和 post 的区别&quot;">​</a></h2><ul><li>get 一般用于查询操作，post 一般用于提交操作</li><li>get 参数在 url 上，post 在请求体内</li><li>安全性：post 请求易于防止 CSRF</li></ul><h2 id="http缓存" tabindex="-1">http缓存 <a class="header-anchor" href="#http缓存" aria-label="Permalink to &quot;http缓存&quot;">​</a></h2><p><strong>强制缓存</strong></p><p>Cache-Control</p><ul><li>Response Headers中</li><li>控制强制缓存的逻辑</li><li>例如 Carch-Control: max-age=10（单位/秒）</li><li>相关值：<strong>max-age、no-cache</strong>（浏览器不缓存，交给服务器来控制缓存）、no-store（浏览器和服务器都不缓存）、private（只允许最终用户缓存）、public（允许中间代理服务也能缓存）</li></ul><p>关于Expires</p><ul><li>同在 Response Headers中</li><li>同为控制缓存过期</li><li>已被 Cache-Control 代替</li></ul><p><strong>协商缓存（对比缓存）</strong></p><ul><li>服务端缓存策略（由服务端判断，缓存还是在浏览器端）</li><li>服务端判断客户端资源，是否和服务端资源一样</li><li>一致则返回304，否则返回200和最新的资源</li></ul><img src="http://cdn.wangtongmeng.com/20231006213123-bbd8b0.png" style="zoom:30%;"><p>资源标识</p><ul><li>在 Response Headers 中，有两种</li><li>Last-Modified 资源的最后修改时间</li><li>Etag 资源的唯一标识（一个字符串，类似人类的指纹）</li></ul><p>Last-Modified</p><img src="http://cdn.wangtongmeng.com/20231006213528-ba0aed.png" style="zoom:33%;"><p>Etag</p><img src="http://cdn.wangtongmeng.com/20231006214042-383935.png" style="zoom:33%;"><p>Last-Modified 和 Etag</p><ul><li>会优先使用 Etag</li><li>Last-Modified 只能精确到秒级</li><li>如果资源被重复生成，而内容不变，则 Etag 更精确</li></ul><img src="http://cdn.wangtongmeng.com/20231006214510-107d6e.png" style="zoom:33%;"><p>一般主页面html是不做强制缓存的，只会做协商缓存</p><h2 id="刷新页面对http缓存的影响" tabindex="-1">刷新页面对http缓存的影响 <a class="header-anchor" href="#刷新页面对http缓存的影响" aria-label="Permalink to &quot;刷新页面对http缓存的影响&quot;">​</a></h2><p>三种刷新操作</p><ul><li>正常操作：地址栏输入 url，跳转链接，前进后退等</li><li>手动刷新：F5，点击刷新按钮，右键菜单刷新</li><li>强制刷新：ctrl + F5</li></ul><p>不同刷新操作，不同的缓存策略</p><ul><li>正常操作：强制缓存有效，协商缓存有效</li><li>手动刷新：强制缓存失效，协商缓存有效</li><li>强制刷新：强制缓存失效，协商缓存失效</li></ul><h2 id="https" tabindex="-1">https <a class="header-anchor" href="#https" aria-label="Permalink to &quot;https&quot;">​</a></h2><ul><li>http 和 https</li><li>加密方式：对称加密，非对称加密</li><li>https 证书</li></ul><p>http 和 https</p><ul><li>http 是明文传输，敏感信息容易被中间劫持</li><li>https = http + 加密，劫持了也无法解密</li><li>现代浏览器已开始强制 https 协议</li></ul><p>加密方式</p><ul><li>对称加密： 一个 key 同时负责加密、解密，成本低。</li><li>非对称加密：一对 key，A 加密之后，只能用 B 来解密</li><li>https 同时用到了这两种加密方式</li></ul><p>https 证书</p><ul><li>中间人攻击（伪造pubicKey和key，这样就能解密到信息了）</li><li>使用第三方证书（慎用免费、不合规的证书）</li><li>浏览器校验证书</li></ul><img src="http://cdn.wangtongmeng.com/20231006225032-0a1382.png" style="zoom:33%;"><h2 id="请描述-tcp-三次握手和四次挥手" tabindex="-1">请描述 TCP 三次握手和四次挥手 <a class="header-anchor" href="#请描述-tcp-三次握手和四次挥手" aria-label="Permalink to &quot;请描述 TCP 三次握手和四次挥手&quot;">​</a></h2><p>建立 TCP 连接</p><ul><li>先建立连接（确保双方都有收发消息的能力）</li><li>再传输内容（如发送给一个 get 请求）</li><li>网络连接是 TCP 协议，传输内容是 HTTP 协议</li></ul><p>三次握手 - 建立连接</p><ul><li>Client 发包，Server 接收。Server：有 Client 要找我</li><li>Server 发包，Client 接收。Client：Server 已经收到消息了</li><li>Client 发包，Server 接收。Server：Client 要准备发送了</li></ul><p>前两次确定双方都能通信，再正式传输内容</p><p>四次挥手</p><ul><li>Client 发包，Server 接收。Server：Cient 已经请求结束</li><li>Server 发包，Cilent 接收。Client：Server 已收到，我等待它关闭</li><li>Server 发包，Client 接收。Client：Server 此时可以关闭连接了</li><li>Client 发包，Server 接收。Server：可以关闭了（然后关闭连接）</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>![image-20231016150219425](C:\\Users\\wtm\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231016150219425.png)</span></span></code></pre></div><h2 id="http-滑动窗口解决了什么问题" tabindex="-1">http 滑动窗口解决了什么问题 <a class="header-anchor" href="#http-滑动窗口解决了什么问题" aria-label="Permalink to &quot;http 滑动窗口解决了什么问题&quot;">​</a></h2><p>HTTP中的滑动窗口是一种流量控制机制，用于解决发送方和接收方之间的数据传输速率不匹配的问题。它主要解决了以下两个问题：</p><ol><li><p>流量控制：滑动窗口机制允许接收方根据自身的处理能力和可用缓冲区大小来控制数据的接收速率。发送方根据接收方的窗口大小来确定可以发送的数据量，从而避免了接收方无法及时处理大量到达的数据，导致缓冲区溢出和数据丢失的问题。</p></li><li><p>可靠性：滑动窗口机制还提供了可靠的数据传输保证。接收方使用滑动窗口确认机制，通过发送确认消息告知发送方已成功接收到数据，发送方根据接收到的确认消息来确定哪些数据已经被接收，哪些数据需要重新发送。这样可以确保数据的可靠传输，减少数据丢失和重传的次数。</p></li></ol><p>通过滑动窗口机制，发送方和接收方之间可以动态地调整数据传输速率，保证数据的可靠传输和接收方的处理能力匹配，提高了数据传输的效率和性能。</p><h2 id="webworker-的作用" tabindex="-1">webworker 的作用 <a class="header-anchor" href="#webworker-的作用" aria-label="Permalink to &quot;webworker 的作用&quot;">​</a></h2><h2 id="用户访问出现白屏-开发测试没有出现白屏-怎么排查" tabindex="-1">用户访问出现白屏，开发测试没有出现白屏，怎么排查 <a class="header-anchor" href="#用户访问出现白屏-开发测试没有出现白屏-怎么排查" aria-label="Permalink to &quot;用户访问出现白屏，开发测试没有出现白屏，怎么排查&quot;">​</a></h2><p>白屏问题可能由多种原因引起，以下是一些常见的排查步骤：</p><ol><li><p>检查网络连接：确保用户在访问时有稳定的网络连接。可以尝试在其他网络环境下测试，或者使用不同的设备进行访问，以确定是否是网络问题导致的白屏。</p></li><li><p>查看浏览器控制台：打开浏览器的开发者工具，查看控制台中是否有任何错误消息。白屏通常与 JavaScript 错误相关，因此请特别注意是否有任何 JavaScript 错误。如果有错误消息，请根据错误信息进行进一步的调试。</p></li><li><p>清除缓存：尝试清除浏览器缓存并刷新页面。有时候旧的缓存文件可能导致页面加载问题。</p></li><li><p>检查日志文件：如果您的应用程序有日志记录功能，检查日志文件以查看是否有任何异常或错误消息。这些信息可能有助于确定白屏问题的根本原因。</p></li><li><p>检查服务器状态：确保服务器正常运行，并且没有任何故障或资源耗尽的情况。查看服务器的日志文件或监控工具，以确定是否有任何异常情况。</p></li><li><p>测试环境复现：尝试在与用户相同的环境中进行测试，使用相同的设备和浏览器版本。如果能够复现白屏问题，那么可能存在与用户环境相关的问题。</p></li><li><p>逐步调试：如果以上步骤都没有找到问题所在，您可以尝试逐步调试页面。通过逐渐添加或删除代码块，以及注释掉可能引起问题的部分，来确定引起白屏的具体代码。这可以帮助您缩小问题范围并找到可能的原因。</p></li></ol>',72),r=[p];function o(n,s,h,c,d,u){return e(),i("div",null,r)}const C=l(a,[["render",o]]);export{m as __pageData,C as default};
