import{_ as e,c as a,o as i,a4 as l}from"./chunks/framework.C5rzuSi5.js";const f=JSON.parse('{"title":"性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"fe/interview/性能优化.md","filePath":"fe/interview/性能优化.md","lastUpdated":1698576648000}'),t={name:"fe/interview/性能优化.md"},r=l('<h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h1><h2 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;css&quot;">​</a></h2><h3 id="加载性能" tabindex="-1">加载性能 <a class="header-anchor" href="#加载性能" aria-label="Permalink to &quot;加载性能&quot;">​</a></h3><ul><li>css压缩：压缩css</li><li>css单一样式：当需要下边距和左边距时，很多时候会选择使用 margin: top 0 bottom 0;但margin-bottom-left:left；执行效率更高</li><li>减少使用 <code>@import</code>，建议使用 link，后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</li></ul><h3 id="选择器性能" tabindex="-1">选择器性能 <a class="header-anchor" href="#选择器性能" aria-label="Permalink to &quot;选择器性能&quot;">​</a></h3><ul><li>选择器层级，最多三层</li></ul><h3 id="渲染性能" tabindex="-1">渲染性能 <a class="header-anchor" href="#渲染性能" aria-label="Permalink to &quot;渲染性能&quot;">​</a></h3><ul><li>慎重使用高性能属性：浮动、定位。</li><li>尽量减少页面重排、重绘</li></ul><h3 id="可维护性、健壮性" tabindex="-1">可维护性、健壮性 <a class="header-anchor" href="#可维护性、健壮性" aria-label="Permalink to &quot;可维护性、健壮性&quot;">​</a></h3><ul><li>将具有相同属性的样式抽离出来，整合并通过class在页面中使用，提高css的可维护性。</li><li>样式与内容分离：将css定义到外部css中</li><li>相关的css属性要放在一起，例如flex相关，元素大小相关，定位相关等。</li></ul><h2 id="js" tabindex="-1">js <a class="header-anchor" href="#js" aria-label="Permalink to &quot;js&quot;">​</a></h2><h2 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h2><h2 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;React&quot;">​</a></h2><h2 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h2><h2 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h2><h3 id="你是如何做性能优化的-有哪些注意的点-也是code-review-要提的点" tabindex="-1">你是如何做性能优化的，有哪些注意的点（也是code review 要提的点） <a class="header-anchor" href="#你是如何做性能优化的-有哪些注意的点-也是code-review-要提的点" aria-label="Permalink to &quot;你是如何做性能优化的，有哪些注意的点（也是code review 要提的点）&quot;">​</a></h3><h3 id="code-revew-规范" tabindex="-1">code revew 规范 <a class="header-anchor" href="#code-revew-规范" aria-label="Permalink to &quot;code revew 规范&quot;">​</a></h3><ul><li>代码规范（eslint 不能全检查，如变量命名、代码语义）</li><li>重复的代码要抽离、复用</li><li>单个函数内容过长，需要拆分</li><li>算法复杂度是否可用？是否可继续优化</li><li>是否有安全漏洞？</li><li>扩展性如何？（不封闭即可）</li><li>是否和现有的功能重复了？</li><li>是否有完善的单元测试？</li><li>组件设计是否合理？</li><li>Code Review的时机 <ul><li>提交 PR（或 MR）时，通过代码 diff 进行 Code Review</li><li>每周例行一次集体 Code Review</li></ul></li><li>持续优化 <ul><li>每次 Code Review 的问题要记录下</li><li>归纳整理，形成自己的代码规范体系</li><li>新加入的成员要提前学习，提前规避</li></ul></li></ul>',18),o=[r];function s(c,h,d,n,u,b){return i(),a("div",null,o)}const m=e(t,[["render",s]]);export{f as __pageData,m as default};
